{
    "@context": {
      "@vocab": "https://schema.org/", 
      "xsd": "https://www.w3.org/TR/xmlschema-2/#",
      "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
      "dc": "http://purl.org/dc/terms/",
      "dcat": "https://www.w3.org/ns/dcat#",
      "freq": "http://purl.org/cld/freq/",
      "qudt": "http://qudt.org/schema/qudt/",
      "qudt-units": "http://qudt.org/vocab/unit/",
      "qudt-quantkinds": "http://qudt.org/vocab/quantitykind/",
      "gsp": "http://www.opengis.net/ont/geosparql#",
      "locType": "http://vocabulary.odm2.org/sitetype",
      "odm2var":"http://vocabulary.odm2.org/variablename/",
      "odm2varType": "http://vocabulary.odm2.org/variabletype/",
      "hyf": "https://www.opengis.net/def/schema/hy_features/hyf/",
      "skos": "https://www.opengis.net/def/schema/hy_features/hyf/HY_HydroLocationType",
      "ssn": "http://www.w3.org/ns/ssn/",
      "ssn-system": "http://www.w3.org/ns/ssn/systems/"
    },
    "@id": "{{ data['@id'] }}",
    "@type": [
      "hyf:HY_HydrometricFeature",
      "hyf:HY_HydroLocation",
      "locType:stream"
    ],
    "hyf:HydroLocationType": "hydrometric station",
    "sameAs": {
      "@id": "https://geoconnex.us/ref/gages/{# Was told to not worry about changing this for time being, no way to get this without a geospatial query #}"
    },
    "identifier": {
      "@type": "PropertyValue",
      "propertyID": "USGS site number",
      {% if data['monitoringLocationNumber'] %}
        "value": "{{ data['monitoringLocationNumber'] }}"
      {% endif %}
    },
    {% if data['name'] %}
      "name": "{{ data['name'] }}",
    {% endif %}

    {% if data['locations'] and data['locations'][0]['description'] %}
      "description": "{{ data['locations'][0]['description'] }}",
    {% endif %}
    "provider": {
      "url": "https://waterdata.usgs.gov",
      "@type": "GovernmentOrganization",
      "name": "U.S. Geological Survey Water Data for the Nation"
    },
    {% if data['schema:geo'] %}
      "geo": {{ data['schema:geo'] | to_json }},
    {% endif %}
    {% if data['gsp:hasGeometry'] %}
      "gsp:hasGeometry": {
        "@type": "{{ data['gsp:hasGeometry']['@type'] }}", 
        "gsp:asWKT": {{ data['gsp:hasGeometry']['gsp:asWKT'] | to_json }},
        "gsp:crs": {
          "@id": "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
        }
      },
    {% endif %}

    {# Since @id is the only key in this block, I am assuming we can just exclude the entire block if it doesn't exist since the block would not provide any info #}
    {% if data["Locations"][0]["properties"] is defined and data["Locations"][0]["properties"]["mainstemURL"] %}
    "hyf:referencedPosition": {
      "hyf:HY_IndirectPosition": {
         "hyf:linearElement": {
          {# I am assuming we can hard code 0 since this template is location-oriented and thus all date is related to one location#}
          "@id": "https://geoconnex.us/ref/mainstems/{{ data['Locations'][0]['properties']['mainstemURL'] }}"
        }
      }
    },
    {% endif %}

    "subjectOf": [
      {% for stream in data['Datastreams'] %}
          {
            {# In production we would have a function to map this to all possible types #}
            {% with typeOfData= "Flow rate" if "Flow rate" in stream['description'] else "Precipitation"%}

            "@type": "Dataset",

            {% if data['name'] %}
            {# We use the name since all datastreams are coming from the same location #}
              "name": "Flow rate data from USGS Monitoring Location {{data['name']}}",
            {% endif %}

            {% if stream['description'] %}
            {# Description describes what type of data that is being collected #}
            "description": "{{ stream["description"]}}",
            {% endif %}

            {# This is hardcoded, since it is not provided in the raw jsonld#}
            "provider": {
              "url": "https://waterdata.usgs.gov",
              "@type": "GovernmentOrganization",
              "name": "U.S. Geological Survey Water Data for the Nation"
            },

            "url": "https://waterdata.usgs.gov/monitoring-location/08282300/#parameterCode={{ stream["properties"]["ParameterCode"] }}",
           {# Assume here it is discharge, but ideally we would get this variable #}
            "variableMeasured": {
              "@type": "PropertyValue",
              "name": "{{ typeOfData }}",

              {% if stream['unitOfMeasurement']['symbol'] %}
              "description": "{{ typeOfData }} in {{ stream['unitOfMeasurement']['symbol'] }}",
              {% endif %}

              "propertyID": "https://www.wikidata.org/w/index.php?search={{ typeOfData }}",

              {# 
              If there are many types of data, we have to just search since we can't be confident
              that it matches the wikipedia name
              #}
              "url": "https://en.wikipedia.org/w/index.php?search={{ typeOfData }}",

              {# For USGS, ['unitOfMeasurement']['name'] is not defined, so we use 'symbol' #}
              {% if stream['unitOfMeasurement']['symbol'] %}
              "unitText": "{{ stream['unitOfMeasurement']['symbol'] }}",
              {% endif %}

              {# These need to be hardcoded, qudt does not seem to be output by USGS with pygeoapi #}
              {# In production we would map {{ typeOfData }} to a dict that outputs the well defined qudt value #}
              "qudt:hasQuantityKind": "qudt-quantkinds:VolumeFlowRate",
              "unitCode": "qudt-units:FT3-PER-SEC",
              "measurementTechnique": "observation",
              "measurementMethod": {
                
                {# Assume gaging stations but this is not provided in the raw jsonld#}
                "name": "{{ typeOfData }} Measurements at Gaging Stations",
                "publisher": "U.S. Geological Survey",
                "url": "https://doi.org/10.3133/tm3A8"
              }
            },
            {% if stream['observedArea'] is defined and stream['observedArea']['phenomenonTime'] %}
              "temporalCoverage": "{{ stream['observedArea']['phenomenonTime'] }}",
            {% endif %}

            {# dc and dcat are not provided in the raw jsonld, must be hardcoded #}
            "dc:accrualPeriodicity": "freq:daily",
            "dcat:temporalResolution": {"@value":"PT15M","@type":"xsd:duration"},
            "distribution": [
              {
                "@type": "DataDownload",
                "name": "USGS Instantaneous Values Service",

                {#`sites` is the same as the Thing id but the hyphen is replaced by a colon. if there is no hyphen, then you just pipe in the thing id  #}
                {# We then need to remove the surrounding '' to make sure the query is properly formatted #}
                "contentUrl": "https://waterservices.usgs.gov/nwis/iv/?sites={{data['id'] | replace("-", ":" ) | replace("'", "")}}&parameterCd={{ stream["properties"]["ParameterCode"] }}&format=rdb",
                "encodingFormat": [
                  "text/tab-separated-values"
                ],
                "dc:conformsTo": "https://pubs.usgs.gov/of/2003/ofr03123/6.4rdb_format.pdf"
              },
              {
                "@type": "DataDownload",
                "name": "USGS SensorThings API",
                "contentUrl": "https://labs.waterdata.usgs.gov/sta/v1.1/Datastreams('{{stream['@iot.id']}}')?$expand=Thing,Observations",
                "encodingFormat": [
                  "application/json"
                ],
                "dc:conformsTo": "https://labs.waterdata.usgs.gov/docs/sensorthings/index.html"
              }
            ]
          }
        {% if not loop.last %},{% endif %}
        {% endwith %} 
        {% endfor %}
      ]
}